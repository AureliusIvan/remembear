import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border border-slate-200 px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-slate-950 focus:ring-offset-2 dark:border-slate-800 dark:focus:ring-slate-300",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-slate-900 text-slate-50 hover:bg-slate-900/80 dark:bg-slate-50 dark:text-slate-900 dark:hover:bg-slate-50/80",
        secondary:
          "border-transparent bg-slate-100 text-slate-900 hover:bg-slate-100/80 dark:bg-slate-800 dark:text-slate-50 dark:hover:bg-slate-800/80",
        destructive:
          "border-transparent bg-red-500 text-slate-50 hover:bg-red-500/80 dark:bg-red-900 dark:text-slate-50 dark:hover:bg-red-900/80",
        outline: "text-slate-950 dark:text-slate-50",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

/**
 * @description Inherits from two types: `React.HTMLAttributes<HTMLDivElement>` and
 * `VariantProps<typeof badgeVariants>`. This indicates that the `BadgeProps` interface
 * extends the properties of both HTML attributes for a `div` element and variant
 * props specific to `badgeVariants`.
 * 
 * As a result, any object that implements this interface must provide all the
 * properties required by `React.HTMLAttributes<HTMLDivElement>` (such as `id`,
 * `className`, etc.) in addition to any properties provided by `VariantProps<typeof
 * badgeVariants>`.
 */
export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

/**
 * @description Renders a div element with a dynamic class name generated by combining
 * the `badgeVariants` and the provided `className`. It accepts props and passes them
 * to the rendered div element.
 * 
 * @param {object} obj - Destructured from an interface named `BadgeProps`. It contains
 * two properties, `className` and `variant`, which are optional, along with any
 * additional props (`...props`).
 * 
 * @param {BadgeProps} obj.className - Optional, allowing additional CSS classes to
 * be added.
 * 
 * @param {BadgeProps} obj.variant - Used to determine the styling of the badge.
 * 
 * @returns {ReactNode} A JSX element, specifically an HTML div element with a
 * dynamically generated class name and props passed to it.
 */
function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }
